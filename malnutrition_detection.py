# -*- coding: utf-8 -*-
"""Malnutrition Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PnoH4vlwMZwnu86qJzMm1JbkH14s5Dx2

Connecting colab with drive
"""

from google.colab import drive
drive.mount('/content/drive')

!ls "/content/drive/My Drive/Malnutrition Dataset"

from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
import os
import numpy as np

# Augmentation ke liye ImageDataGenerator banaya
datagen = ImageDataGenerator(
    rotation_range=20,       # 0-20 degree tak image ghoomega
    width_shift_range=0.2,   # Thoda left-right shift hoga
    height_shift_range=0.2,  # Thoda up-down shift hoga
    shear_range=0.2,         # Shear transformation
    zoom_range=0.2,          # Thoda zoom in-out hoga
    horizontal_flip=True,    # Horizontal flip hoga
    fill_mode='nearest'      # Missing pixels ko fill karega
)

# Function jo images ko augment karega
def augment_images(folder, save_folder):
    os.makedirs(save_folder, exist_ok=True)  # Save folder create karega

    for img_name in os.listdir(folder):
        img_path = os.path.join(folder, img_name)
        img = load_img(img_path)  # Image load karega
        x = img_to_array(img)     # Image ko numpy array me convert karega
        x = np.expand_dims(x, axis=0)  # 4D tensor banayega (batch ke liye)

        # Har image se 10 naye images banayega
        i = 0
        for batch in datagen.flow(x, batch_size=1, save_to_dir=save_folder, save_prefix='aug', save_format='jpg'):
            i += 1
            if i >= 10:  # 10 augmented images per input image
                break

# Healthy images augment karo
augment_images("/content/drive/My Drive/Malnutrition Dataset/Healthy",
               "/content/drive/My Drive/Malnutrition Dataset/Augmented_Healthy")

# Malnourished images augment karo
augment_images("/content/drive/My Drive/Malnutrition Dataset/Malnourished",
               "/content/drive/My Drive/Malnutrition Dataset/Augmented_Malnourished")

print("✅ Data Augmentation Complete!")

import os

# Check number of augmented images
aug_healthy = "/content/drive/My Drive/Malnutrition Dataset/Augmented_Healthy"
aug_malnourished = "/content/drive/My Drive/Malnutrition Dataset/Augmented_Malnourished"

print("Healthy Augmented Images:", len(os.listdir(aug_healthy)))
print("Malnourished Augmented Images:", len(os.listdir(aug_malnourished)))

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # Split validation from training data
)

train_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary',
    subset='training'
)

validation_generator = train_datagen.flow_from_directory(
    dataset_path,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary',
    subset='validation'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(224,224,3)),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(64, (3,3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(128, (3,3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(256, (3,3), activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2,2)),

    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),

    Dense(128, activation='relu'),
    Dropout(0.3),

    Dense(1, activation='sigmoid')
])

model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])

print("✅ Model Created Successfully!")

history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=10
)

model.save('model.keras')

from google.colab import drive
drive.mount('/content/drive')

test_data_dir = '/content/drive/My Drive/Malnutrition Dataset/test_data'

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'  # healthy aur malnourished ke liye
)

test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test Accuracy: {test_accuracy}')

model.save('/content/drive/MyDrive/Malnutrition Detection/model.keras')

